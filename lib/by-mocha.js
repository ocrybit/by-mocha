// Generated by CoffeeScript 1.3.3
(function() {
  var ByMocha, EventEmitter, coffee, cp, fs, minimatch, path, util, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  minimatch = require('minimatch');

  util = require('util');

  cp = require('child_process');

  _ = require('underscore');

  coffee = require('coffee-script');

  EventEmitter = require('events').EventEmitter;

  module.exports = ByMocha = (function(_super) {

    __extends(ByMocha, _super);

    function ByMocha(opts) {
      var v;
      this.opts = opts != null ? opts : {};
      this.dependencyMap = {};
      this.testPaths = [];
      if (this.opts.testPaths != null) {
        this.testPaths = (function() {
          var _i, _len, _ref, _results;
          _ref = this.opts.testPaths;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push(path.resolve(v));
          }
          return _results;
        }).call(this);
      }
      this.mochaStack = [];
      this.mocharunning = false;
    }

    ByMocha.prototype._setListeners = function(bystander) {
      var _this = this;
      this.bystander = bystander;
      this.bystander.on('File changed', function(data) {
        var filename;
        if (data.file != null) {
          filename = data.file;
        } else if (typeof data === 'string') {
          filename = data;
        }
        if (_this._isTest(filename)) {
          _this._getTestDependencies(filename);
          return _this._registerTest(filename);
        } else if (path.extname(filename) === '.js') {
          return _this._checkTest(filename, data);
        }
      });
      this.bystander.on('File created', function(data) {
        var filename;
        if (data.file != null) {
          filename = data.file;
        } else if (typeof data === 'string') {
          filename = data;
        }
        _this._checkTest(filename, data);
        if (_this._isTest(filename)) {
          _this._getTestDependencies(filename);
          return _this._registerTest(filename);
        } else if (path.extname(filename) === '.js') {
          return _this._checkTest(filename, data);
        }
      });
      return this.bystander.on('File found', function(file, stat) {
        if (_this._isTest(file)) {
          return _this._getTestDependencies(file);
        }
      });
    };

    ByMocha.prototype._getTestDependencies = function(file, cb) {
      var _this = this;
      return fs.readFile(file, 'utf8', function(err, body) {
        var nodes, set;
        if (!err) {
          try {
            set = false;
            nodes = coffee.nodes(_this._removeComments(body));
            _this._parseNode(nodes, file);
            if (!(_this.dependencyMap[file] != null)) {
              _this.dependencyMap[file] = [];
              set = true;
            }
            _this.dependencyMap[file].push(file);
            _this.dependencyMap[file] = _(_this.dependencyMap[file]).uniq();
            if (set) {
              _this.emit('set dependency', file, _this.dependencyMap);
            }
          } catch (e) {
            console.log(e);
          }
        }
        return typeof cb === "function" ? cb() : void 0;
      });
    };

    ByMocha.prototype._isTest = function(file) {
      var v, _i, _len, _ref;
      if (path.extname(file) === '.coffee' && (this.testPaths != null)) {
        _ref = this.testPaths;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (minimatch(file, v, {
            dot: true
          })) {
            return true;
          }
        }
      }
      return false;
    };

    ByMocha.prototype._parseNode = function(node, file) {
      var i, k, moduleName, mpath, v, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _results, _results1;
      if (((_ref = node.value) != null ? (_ref1 = _ref.variable) != null ? (_ref2 = _ref1.base) != null ? _ref2.value : void 0 : void 0 : void 0) === 'require' && (node.value.args != null)) {
        moduleName = (_ref3 = node.value.args[0]) != null ? (_ref4 = _ref3.base) != null ? _ref4.value.replace(/^\'/, '').replace(/\'$/, '').replace(/^\"/, '').replace(/\"$/, '') : void 0 : void 0;
        if (moduleName.match(/\.{1,2}/) !== null) {
          mpath = path.join(path.dirname(file), moduleName);
          if (!(this.dependencyMap[mpath] != null)) {
            this.dependencyMap[mpath] = [];
          }
          this.dependencyMap[mpath].push(file);
          this.dependencyMap[mpath] = _(this.dependencyMap[mpath]).uniq();
        }
      }
      if (util.isArray(node)) {
        _results = [];
        for (i = _i = 0, _len = node.length; _i < _len; i = ++_i) {
          v = node[i];
          _results.push(this._parseNode(v, file));
        }
        return _results;
      } else if (typeof node === 'object') {
        _results1 = [];
        for (k in node) {
          v = node[k];
          if (v != null) {
            _results1.push(this._parseNode(v, file));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }
    };

    ByMocha.prototype._removeComments = function(body) {
      var v;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = body.split('\n');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (v.match(/^\s*\#/) === null) {
            _results.push(v);
          }
        }
        return _results;
      })()).join('\n');
    };

    ByMocha.prototype._registerTest = function(file) {
      var v;
      this.mochaStack = (function() {
        var _i, _len, _ref, _results;
        _ref = this.mochaStack;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (v !== file) {
            _results.push(v);
          }
        }
        return _results;
      }).call(this);
      this.mochaStack.push(file);
      if (this.mocharunning === false) {
        return this._mocha();
      }
    };

    ByMocha.prototype._getTestPath = function(src) {
      if (this.dependencyMap[src] != null) {
        return this.dependencyMap[src];
      }
      return false;
    };

    ByMocha.prototype._removeTest = function(filename) {
      var i2, k, removed, v, v2, _ref;
      removed = false;
      if (this.dependencyMap[filename]) {
        delete this.dependencyMap[filename];
        removed = true;
      }
      _ref = this.dependencyMap;
      for (k in _ref) {
        v = _ref[k];
        this.dependencyMap[k] = (function() {
          var _i, _len, _results;
          _results = [];
          for (i2 = _i = 0, _len = v.length; _i < _len; i2 = ++_i) {
            v2 = v[i2];
            if (v2 !== filename) {
              _results.push(v2);
            }
          }
          return _results;
        })();
      }
      if (removed) {
        return this.emit('removed dependency', filename, this.dependencyMap);
      }
    };

    ByMocha.prototype._checkTest = function(filename, data) {
      if (this.dependencyMap[filename] != null) {
        return this._registerTest(filename);
      } else if (this.dependencyMap[filename.replace(/\.js$/, '')] != null) {
        return this._registerTest(filename.replace(/\.js$/, ''));
      }
    };

    ByMocha.prototype._mocha = function() {
      var cp_mocha, files, src, testfile,
        _this = this;
      this.mocharunning = true;
      src = this.mochaStack.shift();
      testfile = this._getTestPath(src);
      if (!(testfile === false || testfile.length === 0)) {
        files = testfile;
        cp_mocha = cp.fork(__dirname + '/mocha', {
          silent: true
        });
        cp_mocha.on('message', function(data) {
          var i, message, v, _i, _len, _ref;
          if (data.err) {
            if (!_this.opts.nolog) {
              console.log('Mocha: something went wrong!\n'.red);
            }
          } else {
            if (!_this.opts.nolog) {
              message = ["Mocha:"];
              if (data.result.passes.length !== 0) {
                message.push((" " + data.result.passes.length + " tests passed!").green);
              }
              if (data.result.failures.length !== 0) {
                message.push((" " + data.result.failures.length + " tests failed!").red);
              }
              message.push((" <= tests for " + src).grey + '\n');
              console.log(message.join(''));
              console.log('');
              _ref = data.result.failures;
              for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                v = _ref[i];
                console.log("" + (i + 1) + ") " + v.fullTitle);
                console.log(v.err.message.red);
                console.log('');
              }
            }
          }
          _this.emit('mocha', data);
          _this.mocharunning = false;
          if (_this.mochaStack.length !== 0) {
            return _this._mocha();
          }
        });
        cp_mocha.on('error', function(err) {
          return console.log('Mocha: something went wrong!\n'.red);
        });
        return cp_mocha.send({
          file: src,
          mocha: {
            files: files
          }
        });
      } else {
        this.mocharunning = false;
        if (this.mochaStack.length !== 0) {
          return this._mocha();
        }
      }
    };

    return ByMocha;

  })(EventEmitter);

}).call(this);
